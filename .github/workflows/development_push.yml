name: Auto Update Head Branch

# on:
#     push:
#         branches:
#             - 'main'
on:
  pull_request:
    types: [opened, ready_for_review, reopened, edited, synchronize]

jobs:
  # deploy:
  #   uses: 'SaaS-Innova/github-action/.github/workflows/frontend-development.yml@main'
  #   with:
  #     hostname: '46.246.49.208'
  #     user: 'accounts'
  #     target: 'staging'
  #     destination: '~/repos/BoilerPlateReact'
  #     fingerprint: '46.246.49.208 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCjaWGdnEELkQOloke/aWZMkQ1MerQHYiGnK/z8TXu4i7GE0yIk6HwfcfQftkIzY4ypROGR3waz9wUZkE59Fw4uIeM3PP1EIbqOQk3BI9LGBPkbWXDQyNiqBwFOHj4dWtIIWV+CIuwY7jrPf3dC7fpt9cCORPgHa3eD8pymGs4PA1gKXL9e3lq0L6aenl1uPLldXU5x4+F0HvHYyydc7H1bKijrxZ1wY+1ZCM8l/wZ4V6FxE3bFwZDxDSxfH3Wq9FSgTYZrgRmKSPw1IWZD+FSAx1Naz+HWuEVIhoM/uJKPVO/wUyjKFCKO0To3xEXg0fheVh06+zbxxPAKUjy/H/Wyxv65FjzVuua5Pd89wNkKOfzwPOPE6XuTMvCEYnJ7SggwpaFZJB6RjU+IeAHT/SC1TlBIS3fcaAmdQx4yapr5y7rC1qDGf9pAG0kTv4p4zu3QpJa+KS8mvQupKFuXAx7SpPrTxAOBzT8+czeRfcvXWxCO4eeatOD70C+Af9l+a7k='
  #     pm2_name: 'BoilerPlateFE'
  #   secrets:
  #     password: ${{ secrets.STG_PASSWORD }}
  #     dotenv_key: ${{ secrets.STG_DOTENV_KEY }}
  
  auto-update222:
        runs-on: ubuntu-latest
        steps:
            - name: Check Out Code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
              env:
                  PAT: ${{ secrets.GITHUB_TOKEN }}

            - name: Get Oldest Pull Request
              id: get-oldest-pr
              run: |
                  GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
                  GITHUB_REPOSITORY=${{ github.repository }}

                  echo "Use the GitHub API to fetch the oldest open pull request targeting 'main' branch"
                  oldest_pr_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                    "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?state=open&base=main&sort=created&direction=asc")

                  echo "Raw GitHub API response:"
                  echo "$oldest_pr_data" | jq '.'

                  echo "Parse the JSON data to get the head branch name of the oldest pull request"
                  oldest_pr_head_branch=$(echo "$oldest_pr_data" | jq -r '.[] | select(.state == "open" and .auto_merge) | .head.ref' | head -n 1)

                  # Debugging output
                  echo "oldest_pr_head_branch: $oldest_pr_head_branch"

                  # Check if the oldest pull request number is set
                  if [ -n "$oldest_pr_head_branch" ]; then
                    echo "set the SKIP_UPDATE output variable"
                    echo "SKIP_UPDATE=false" >> $GITHUB_OUTPUT # Set the SKIP_UPDATE output variable
                    echo "set the HEAD_BRANCH_NAME environment variable"
                    echo "HEAD_BRANCH_NAME=$oldest_pr_head_branch" >> $GITHUB_ENV # Set the HEAD_BRANCH environment variable
                  else
                    echo "No open pull requests founds with 'auto-update' label and 'auto_merge' status."
                  fi

            - name: Ensure Current Branch is Up-to-Date and Conflict-Free
              env:
                  BASE_BRANCH: main
              # if: success() && steps.get-oldest-pr.outputs.SKIP_UPDATE == 'false'
              run: |
                  HEAD_BRANCH=$HEAD_BRANCH_NAME # Use the HEAD_BRANCH_NAME environment variable

                  # Debugging output
                  echo "BASE_BRANCH: $BASE_BRANCH"
                  echo "HEAD_BRANCH: $HEAD_BRANCH"

                  echo "Set git user"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "Auto Update Bot"

                  echo "Fetch the latest changes from the remote"
                  git fetch origin
                  echo "Checkout base branch"
                  git checkout "$BASE_BRANCH"
                  echo "Checkout head branch"
                  git checkout "$HEAD_BRANCH"

                  echo "Check merge-base.."
                  if git merge-base --is-ancestor "$BASE_BRANCH" "$HEAD_BRANCH"; then
                    echo "Branch $HEAD_BRANCH is out of date or has conflicts. Manual intervention required."
                  else
                    # The branch is up-to-date and there are no conflicts
                    echo "Branch $HEAD_BRANCH is up-to-date. Proceeding with the auto-update..."
                    git pull --no-edit --no-rebase origin "$BASE_BRANCH" --allow-unrelated-histories
                    echo "Pushing changes to $HEAD_BRANCH"
                    git push origin "$HEAD_BRANCH"            
                  fi
                  echo "Completed..."
                  exit 0

  auto-update:
    uses: 'sakshi-devotess/github-action/.github/workflows/auto-update-head-branch.yml@main'
    with:
      base_branch: "main"
      label_name: "auto-update"
      repository : ${{ github.repository }}
    secrets:
      pat_token : ${{ secrets.GITHUB_TOKEN }}
